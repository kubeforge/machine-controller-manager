// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	machine "github.com/gardener/machine-controller-manager/pkg/apis/machine"
	scheme "github.com/gardener/machine-controller-manager/pkg/client/clientset/internalversion/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// KubeVirtMachineClassesGetter has a method to return a KubeVirtMachineClassInterface.
// A group's client should implement this interface.
type KubeVirtMachineClassesGetter interface {
	KubeVirtMachineClasses(namespace string) KubeVirtMachineClassInterface
}

// KubeVirtMachineClassInterface has methods to work with KubeVirtMachineClass resources.
type KubeVirtMachineClassInterface interface {
	Create(*machine.KubeVirtMachineClass) (*machine.KubeVirtMachineClass, error)
	Update(*machine.KubeVirtMachineClass) (*machine.KubeVirtMachineClass, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*machine.KubeVirtMachineClass, error)
	List(opts v1.ListOptions) (*machine.KubeVirtMachineClassList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machine.KubeVirtMachineClass, err error)
	KubeVirtMachineClassExpansion
}

// kubeVirtMachineClasses implements KubeVirtMachineClassInterface
type kubeVirtMachineClasses struct {
	client rest.Interface
	ns     string
}

// newKubeVirtMachineClasses returns a KubeVirtMachineClasses
func newKubeVirtMachineClasses(c *MachineClient, namespace string) *kubeVirtMachineClasses {
	return &kubeVirtMachineClasses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the kubeVirtMachineClass, and returns the corresponding kubeVirtMachineClass object, and an error if there is any.
func (c *kubeVirtMachineClasses) Get(name string, options v1.GetOptions) (result *machine.KubeVirtMachineClass, err error) {
	result = &machine.KubeVirtMachineClass{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KubeVirtMachineClasses that match those selectors.
func (c *kubeVirtMachineClasses) List(opts v1.ListOptions) (result *machine.KubeVirtMachineClassList, err error) {
	result = &machine.KubeVirtMachineClassList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested kubeVirtMachineClasses.
func (c *kubeVirtMachineClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a kubeVirtMachineClass and creates it.  Returns the server's representation of the kubeVirtMachineClass, and an error, if there is any.
func (c *kubeVirtMachineClasses) Create(kubeVirtMachineClass *machine.KubeVirtMachineClass) (result *machine.KubeVirtMachineClass, err error) {
	result = &machine.KubeVirtMachineClass{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		Body(kubeVirtMachineClass).
		Do().
		Into(result)
	return
}

// Update takes the representation of a kubeVirtMachineClass and updates it. Returns the server's representation of the kubeVirtMachineClass, and an error, if there is any.
func (c *kubeVirtMachineClasses) Update(kubeVirtMachineClass *machine.KubeVirtMachineClass) (result *machine.KubeVirtMachineClass, err error) {
	result = &machine.KubeVirtMachineClass{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		Name(kubeVirtMachineClass.Name).
		Body(kubeVirtMachineClass).
		Do().
		Into(result)
	return
}

// Delete takes name of the kubeVirtMachineClass and deletes it. Returns an error if one occurs.
func (c *kubeVirtMachineClasses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kubeVirtMachineClasses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched kubeVirtMachineClass.
func (c *kubeVirtMachineClasses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machine.KubeVirtMachineClass, err error) {
	result = &machine.KubeVirtMachineClass{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("kubevirtmachineclasses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
